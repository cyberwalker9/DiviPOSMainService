unit ServiceUtils;

interface

  uses Sysutils, Forms, IniFiles, WinSvc, Types;

  type
    EAppException = Class(Exception);



procedure CreateLogPerDay(AMsg : String);
function GetConfig(AppExeName : String;Ext : String = '.cfg'): TIniFile;
function ServiceRunning(sMachine, sService: PChar): Boolean;
procedure HandledException(Sender: TObject; E: Exception);

var
  COnfig : TIniFile;
  IsWritingLog : Boolean;
implementation

procedure HandledException(Sender: TObject; E: Exception);
begin
  CreateLogPerDay(E.Message);
end;


procedure CreateFolderPath(APathFolder : String);
begin
  if not DirectoryExists(APathFolder) then
  if not CreateDir(APathFolder) then
  raise Exception.Create('Cannot create '+APathFolder);
end;

procedure CreateLogPerDay(AMsg : String);
var
  fileName : String;
  AppLog   : TextFile;
  AppPath: string;
begin
  IsWritingLog := true;

  AppPath := IncludeTrailingPathDelimiter(ExtractFilePath(Application.ExeName));
  CreateFolderPath(AppPath+'log');
  fileName := AppPath+'log\Applog_'+formatdatetime('yyyymmdd',Now)+'.log';
  assignfile(AppLog,fileName);
  try
    if not FileExists(fileName) then
      Rewrite(AppLog)
    else
      Append(AppLog);
    writeln(AppLog,FormatdateTime('HH:MM:SS',now)+' :'+AMsg);
  finally
    CloseFile(AppLog);
    IsWritingLog := false;
  end;
end;

function GetConfig(AppExeName : String;Ext : String = '.cfg'): TIniFile;
begin
  if Not Assigned(Config) then
    Config := TIniFile.Create(ChangeFileExt(AppExeName, Ext));
  result := Config;
end;

function ServiceGetStatus(sMachine, sService: PChar): DWORD;
  {******************************************}
  {*** Parameters: ***}
  {*** sService: specifies the name of the service to open
  {*** sMachine: specifies the name of the target computer
  {*** ***}
  {*** Return Values: ***}
  {*** -1 = Error opening service ***}
  {*** 1 = SERVICE_STOPPED ***}
  {*** 2 = SERVICE_START_PENDING ***}
  {*** 3 = SERVICE_STOP_PENDING ***}
  {*** 4 = SERVICE_RUNNING ***}
  {*** 5 = SERVICE_CONTINUE_PENDING ***}
  {*** 6 = SERVICE_PAUSE_PENDING ***}
  {*** 7 = SERVICE_PAUSED ***}
  {******************************************}
var
  SCManHandle, SvcHandle: SC_Handle;
  SS: TServiceStatus;
  dwStat: DWORD;
begin
  dwStat := 0;
  // Open service manager handle.
  SCManHandle := OpenSCManager(sMachine, nil, SC_MANAGER_CONNECT);
  if (SCManHandle > 0) then
  begin
    SvcHandle := OpenService(SCManHandle, sService, SERVICE_QUERY_STATUS);
    // if Service installed
    if (SvcHandle > 0) then
    begin
      // SS structure holds the service status (TServiceStatus);
      if (QueryServiceStatus(SvcHandle, SS)) then
        dwStat := ss.dwCurrentState;
      CloseServiceHandle(SvcHandle);
    end;
    CloseServiceHandle(SCManHandle);
  end;
  Result := dwStat;
end;

function ServiceRunning(sMachine, sService: PChar): Boolean;
begin
  Result := SERVICE_RUNNING = ServiceGetStatus(sMachine, sService);
end;

end.
