unit DiviPOSRestAPI;

interface
  uses
  System.Classes,
  SysUtils,
  System.JSON,
  REST.Authenticator.OAuth,
  REST.Authenticator.Basic,
  REST.Authenticator.Simple,
  REST.Response.Adapter,
  REST.Client,
  REST.Exception,
  REST.Consts,
  REST.Json,
  REST.Types,
  REST.Utils;

  function PostJson(const AResources: String; const AJSonString : String):boolean;
  function GetResponse(aRESTResponse: TRESTResponse):boolean;
  function GetJson(const AResources: String):string;
  function RequestResponseJSON(const AResources: String; var AJSonString : String; AMethod: TRESTRequestMethod = rmGET):Boolean;


implementation

uses uMainService;

function GetResponse(aRESTResponse: TRESTResponse):boolean;
var
  tmpResult: Boolean;
begin
  tmpResult := false;
  with DiviPOSMainService do
  begin
    {init RESTResponse}
    with aRESTResponse do
    begin
      if StatusCode >= 300 then
      begin
        UpdateStatus := 'Request Failed :('+StatusCode.ToString()+') '+#13#10+
                                            StatusText+' '+ErrorMessage;
      end
      else
      begin
        UpdateStatus := 'Request Success';
        tmpResult := true;
      end;
      UpdateStatus := '[Debug] '+Content;
    end;
  end;
  Result := tmpResult;
end;

function PostJson(const AResources: String; const AJSonString : String):boolean;
var
  RESTClient: TRESTClient;
  RESTRequest: TRESTRequest;
  RESTResponse: TRESTResponse;
  tmpResult: Boolean;
begin
  tmpResult := false;
  with DiviPOSMainService do
  begin
    {init REST Client}
    if URLAddress = '' then
    begin
      UpdateStatus := '[Error] URL is Empty ';
      Exit(false);
    end;

    UpdateStatus := 'PostJson to : '+(URLAddress)+AResources;
    UpdateStatus := '[Debug] '+AJSonString;
    RESTClient:= TRESTClient.Create(URLAddress);
    RESTResponse := TRESTResponse.Create(DiviPOSMainService);

    {init REST Request}
    RESTRequest := TRESTRequest.Create(DiviPOSMainService);
    with RESTRequest do
    try
      Client := RESTClient;
      Response := RESTResponse;
      Method := rmPOST;
      if not AJSonString.IsEmpty then      
        AddBody(AJSonString, ctAPPLICATION_JSON);
      Resource := AResources;

      try
        Execute;
      except
        on E: TRESTResponseDataSetAdapter.EJSONValueError do
        begin
          //cannot convert to dataset
          UpdateStatus := E.Message;
        end;
        on E: TRESTResponse.EJSONValueError do
        begin
          UpdateStatus := E.Message;
        end
        else
          raise;
        Exit(false);
      end;
      tmpResult := GetResponse(RESTResponse);
    finally
      RESTClient.Free;
      RESTRequest.Free;
      RESTResponse.Free;
    end;
  end;
  Result := tmpResult;
end;

function GetJson(const AResources: String):string;
var
  AJSonString: string;
begin
  AJSonString := '';
  if not RequestResponseJSON(AResources, AJSonString) then
    Exit;
  Result := AJSonString;
end;

function RequestResponseJSON(const AResources: String; var AJSonString : String; AMethod: TRESTRequestMethod = rmGET):Boolean;
var
  RESTClient: TRESTClient;
  RESTRequest: TRESTRequest;
  RESTResponse: TRESTResponse;
  tmpResult: Boolean;
begin
  tmpResult := false;
  with DiviPOSMainService do
  begin
    {init REST Client}
    if URLAddress = '' then
    begin
      UpdateStatus := '[Error] URL is Empty ';
      Exit(false);
    end;

    RESTClient:= TRESTClient.Create(URLAddress);
    RESTResponse := TRESTResponse.Create(DiviPOSMainService);

    {init REST Request}
    RESTRequest := TRESTRequest.Create(DiviPOSMainService);
    with RESTRequest do
    try
      Client := RESTClient;
      Response := RESTResponse;
      Method := AMethod;
      if not AJSonString.IsEmpty then
        AddBody(AJSonString, ctAPPLICATION_JSON);
      if not AResources.IsEmpty then
        Resource := AResources;

      try
        Execute;
      except
        on E: TRESTResponseDataSetAdapter.EJSONValueError do
        begin
          //cannot convert to dataset
          UpdateStatus := '[Error] Dataset Error: '+E.Message;
        end;
        on E: TRESTResponse.EJSONValueError do
        begin
          UpdateStatus := '[Error] RESTResponse: '+E.Message;
        end
        else
          raise;
        Exit(false);
      end;

      AJSonString := '';
      if RESTResponse.StatusCode = 200 then
        AJSonString := RESTResponse.JSONValue.ToString
      else
      begin
        AJSonString := '[ERROR]';
        UpdateStatus := RESTResponse.Content;
      end;

      Result := RESTResponse.StatusCode = 200;
    finally
      RESTClient.Free;
      RESTRequest.Free;
      RESTResponse.Free;
    end;
  end;
end;

end.
